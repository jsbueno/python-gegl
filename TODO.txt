Smaller stuff todo:
- create a way to insert new nodes in the graph, taking care of the connections
- have a way to access operation's enums (for example, in "fractal-trace"
- simplify the gegl-node object creation in gegl.Graph
   (do we "need" the outer node?)
- check (and test) the representation for complex graphs that embed smaller ones
(there is a test for a simple embedding already)
- Make the repr display other Graphs connected to the [input pad of the] first node 
of the current graph. Currently not displayed
- implement input, output and aux properties to the Graph
- Keep consistency of the ._pads dictionary in opnodes in the _other_ operand
when connecting  pads. (disconnecting is taking care of that already)
- Make Graphs pickeable (python serializable)

wrap GEGL REctangles
wrap Gegl Buffers
   # after getting a work-around to get buffers
   # instatiated at all - right now _gegl.Buffer call is broken
   # as it does not accept any parameters.


Major stuff todo:
- import and export Graphs from XML
- being able to set up graphs as meta-operations
  *(requires GEGL hacking)


Done:
- a way to connect subgraphs to aux and input ports of nodes
    in other existing graphs
- fixed the representation for complex graphs
- translation of "_" to "-" when acessing gegl node
properties as Python properties
- input, output and aux in OpNodes now work as Python
properties that automatically connects Graphs, Nodes or
_gegl.Nodes assigned to them.